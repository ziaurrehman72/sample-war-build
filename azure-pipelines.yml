# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  docker_repo_name: ziaurrehmans/sample-war-app
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  docker_tag: |
       latest
       $(Build.BuildId)
     
pool:
  vmImage: ubuntu-latest

steps:

- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
      maven
    path: $(MAVEN_CACHE_FOLDER)
  displayName: Cache Maven local repo

- script: mvn install -B -e
  displayName: Installing cached mvn dependencies

- task: Maven@3
  displayName: Maven Build
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
    mavenOptions: '$(MAVEN_OPTS)'
    
# Docker caching commented to not to degrade the performance of the pipeline.
#
# - task: Cache@2
#   inputs:
#       key: 'docker | "$(Agent.OS)" | **/Dockerfile'
#       path: $(Pipeline.Workspace)/docker
#       cacheHitVar: DOCKER_CACHE_RESTORED
#   displayName: Caching Docker image

# - script: |
#       docker load < $(Pipeline.Workspace)/docker/cache.tar
#   condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))

# - script: |
#       mkdir -p $(Pipeline.Workspace)/docker
#       docker pull $(docker_repo_name):latest
#       docker save $(docker_repo_name):latest > $(Pipeline.Workspace)/docker/cache.tar
#   condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_RESTORED, 'true')))

- task: Docker@2
  displayName: Buildigng Docker image
  inputs:
    containerRegistry: 'Dockerhub-ServiceConnection'
    repository: 'ziaurrehmans/sample-war-app'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: $(docker_tag)
    arguments: '--cache-from=$(docker_repo_name):latest' 

- task: Bash@3
  displayName: Test and verify the docker image
  inputs:
    targetType: 'inline'
    script: |
      docker run -d -p  8080:8080 $(docker_repo_name):latest      
      echo 'Let it be up...'
      sleep 5
      curl localhost:8080/hello
